{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar gameField = document.querySelector(\"tbody\");\nvar gameScore = document.querySelector(\".game-score\");\nvar button = document.querySelector(\".button\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar messageWin = document.querySelector(\".message-win\");\nvar messageStart = document.querySelector(\".message-start\");\nvar cellsInRow = 4;\nvar scoreCount = 0;\nvar field;\nfunction startGame() {\n    field = Array.from({\n        length: cellsInRow\n    }, function() {\n        return Array(cellsInRow).fill(0);\n    });\n    scoreCount = 0;\n    gameScore.innerText = scoreCount;\n    placeTile();\n    placeTile();\n}\nfunction placeTile() {\n    if (!hasEmptyCells()) return;\n    var randomRow, randomColumn;\n    do {\n        randomRow = Math.floor(Math.random() * cellsInRow);\n        randomColumn = Math.floor(Math.random() * cellsInRow);\n    }while (field[randomRow][randomColumn] !== 0);\n    field[randomRow][randomColumn] = Math.random() < 0.8 ? 2 : 4;\n    setCells();\n}\nfunction hasEmptyCells() {\n    return field.some(function(row) {\n        return row.includes(0);\n    });\n}\nfunction removeEmptyCells(row) {\n    return row.filter(function(num) {\n        return num !== 0;\n    });\n}\nfunction setCells() {\n    for(var i = 0; i < cellsInRow; i++)for(var j = 0; j < cellsInRow; j++){\n        var currentCell = gameField.rows[i].cells[j];\n        var num = field[i][j];\n        currentCell.innerText = \"\";\n        currentCell.classList.value = \"\";\n        currentCell.classList.add(\"field-cell\");\n        if (num > 0) {\n            currentCell.innerText = num;\n            currentCell.classList.add(\"field-cell--\".concat(num));\n        }\n        if (num === 2048) {\n            messageWin.classList.remove(\"hidden\");\n            button.classList.replace(\"restart\", \"start\");\n        }\n    }\n    if (gameIsLost()) messageLose.classList.remove(\"hidden\");\n}\nfunction gameIsLost() {\n    if (hasEmptyCells()) return false;\n    for(var i = 0; i < cellsInRow; i++)for(var j = 0; j < cellsInRow; j++){\n        if (field[i][j] === field[i][j + 1]) return false;\n    }\n    for(var i1 = 0; i1 < cellsInRow - 1; i1++)for(var j1 = 0; j1 < cellsInRow; j1++){\n        if (field[i1][j1] === field[i1 + 1][j1]) return false;\n    }\n    return true;\n}\nfunction slide(row) {\n    var emptyCell = hasEmptyCells();\n    var merge = false;\n    for(var i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1]) {\n        merge = true;\n        break;\n    }\n    if (!emptyCell && !merge) return row;\n    var newRow = removeEmptyCells(row);\n    for(var i1 = 0; i1 < newRow.length - 1; i1++)if (newRow[i1] === newRow[i1 + 1]) {\n        newRow[i1] *= 2;\n        newRow[i1 + 1] = 0;\n        scoreCount += newRow[i1];\n        gameScore.innerText = scoreCount;\n    }\n    newRow = removeEmptyCells(newRow);\n    while(newRow.length < cellsInRow)newRow.push(0);\n    return newRow;\n}\nfunction slideLeft() {\n    for(var i = 0; i < cellsInRow; i++){\n        var row = field[i];\n        row = slide(row);\n        field[i] = row;\n    }\n}\nfunction slideRight() {\n    for(var i = 0; i < cellsInRow; i++){\n        var row = field[i].reverse();\n        row = slide(row).reverse();\n        field[i] = row;\n    }\n}\nfunction slideUp() {\n    for(var i = 0; i < cellsInRow; i++){\n        var col = [\n            field[0][i],\n            field[1][i],\n            field[2][i],\n            field[3][i]\n        ];\n        col = slide(col);\n        for(var j = 0; j < cellsInRow; j++)field[j][i] = col[j];\n    }\n}\nfunction slideDown() {\n    for(var i = 0; i < cellsInRow; i++){\n        var col = [\n            field[0][i],\n            field[1][i],\n            field[2][i],\n            field[3][i]\n        ].reverse();\n        col = slide(col).reverse();\n        for(var j = 0; j < cellsInRow; j++)field[j][i] = col[j];\n    }\n}\nbutton.addEventListener(\"click\", function() {\n    button.classList.replace(\"start\", \"restart\");\n    button.innerText = \"Restart\";\n    messageStart.classList.add(\"hidden\");\n    messageLose.classList.add(\"hidden\");\n    messageWin.classList.add(\"hidden\");\n    startGame();\n});\ndocument.addEventListener(\"keyup\", function(e) {\n    e.preventDefault();\n    var previousField = JSON.stringify(field);\n    switch(e.code){\n        case \"ArrowLeft\":\n            slideLeft();\n            if (JSON.stringify(field) !== previousField) placeTile();\n            break;\n        case \"ArrowRight\":\n            slideRight();\n            if (JSON.stringify(field) !== previousField) placeTile();\n            break;\n        case \"ArrowUp\":\n            slideUp();\n            if (JSON.stringify(field) !== previousField) placeTile();\n            break;\n        case \"ArrowDown\":\n            slideDown();\n            if (JSON.stringify(field) !== previousField) placeTile();\n            break;\n        default:\n            break;\n    }\n    setCells();\n});\n\n//# sourceMappingURL=index.46d9933b.js.map\n","'use strict';\n\nconst gameField = document.querySelector('tbody');\nconst gameScore = document.querySelector('.game-score');\nconst button = document.querySelector('.button');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\nconst cellsInRow = 4;\nlet scoreCount = 0;\nlet field;\n\nfunction startGame() {\n  field = Array.from({ length: cellsInRow }, () => Array(cellsInRow).fill(0));\n  scoreCount = 0;\n  gameScore.innerText = scoreCount;\n  placeTile();\n  placeTile();\n}\n\nfunction placeTile() {\n  if (!hasEmptyCells()) {\n    return;\n  }\n\n  let randomRow, randomColumn;\n\n  do {\n    randomRow = Math.floor(Math.random() * cellsInRow);\n    randomColumn = Math.floor(Math.random() * cellsInRow);\n  } while (field[randomRow][randomColumn] !== 0);\n  field[randomRow][randomColumn] = Math.random() < 0.8 ? 2 : 4;\n  setCells();\n}\n\nfunction hasEmptyCells() {\n  return field.some(row => row.includes(0));\n}\n\nfunction removeEmptyCells(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction setCells() {\n  for (let i = 0; i < cellsInRow; i++) {\n    for (let j = 0; j < cellsInRow; j++) {\n      const currentCell = gameField.rows[i].cells[j];\n      const num = field[i][j];\n\n      currentCell.innerText = '';\n      currentCell.classList.value = '';\n      currentCell.classList.add('field-cell');\n\n      if (num > 0) {\n        currentCell.innerText = num;\n        currentCell.classList.add(`field-cell--${num}`);\n      }\n\n      if (num === 2048) {\n        messageWin.classList.remove('hidden');\n        button.classList.replace('restart', 'start');\n      }\n    }\n  }\n\n  if (gameIsLost()) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction gameIsLost() {\n  if (hasEmptyCells()) {\n    return false;\n  }\n\n  for (let i = 0; i < cellsInRow; i++) {\n    for (let j = 0; j < cellsInRow; j++) {\n      if (field[i][j] === field[i][j + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let i = 0; i < cellsInRow - 1; i++) {\n    for (let j = 0; j < cellsInRow; j++) {\n      if (field[i][j] === field[i + 1][j]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction slide(row) {\n  const emptyCell = hasEmptyCells();\n  let merge = false;\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (row[i] === row[i + 1]) {\n      merge = true;\n      break;\n    }\n  }\n\n  if (!emptyCell && !merge) {\n    return row;\n  }\n\n  let newRow = removeEmptyCells(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      scoreCount += newRow[i];\n      gameScore.innerText = scoreCount;\n    }\n  }\n  newRow = removeEmptyCells(newRow);\n\n  while (newRow.length < cellsInRow) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeft() {\n  for (let i = 0; i < cellsInRow; i++) {\n    let row = field[i];\n\n    row = slide(row);\n    field[i] = row;\n  }\n}\n\nfunction slideRight() {\n  for (let i = 0; i < cellsInRow; i++) {\n    let row = field[i].reverse();\n\n    row = slide(row).reverse();\n    field[i] = row;\n  }\n}\n\nfunction slideUp() {\n  for (let i = 0; i < cellsInRow; i++) {\n    let col = [field[0][i], field[1][i], field[2][i], field[3][i]];\n\n    col = slide(col);\n\n    for (let j = 0; j < cellsInRow; j++) {\n      field[j][i] = col[j];\n    }\n  }\n}\n\nfunction slideDown() {\n  for (let i = 0; i < cellsInRow; i++) {\n    let col = [field[0][i], field[1][i], field[2][i], field[3][i]].reverse();\n\n    col = slide(col).reverse();\n\n    for (let j = 0; j < cellsInRow; j++) {\n      field[j][i] = col[j];\n    }\n  }\n}\n\nbutton.addEventListener('click', () => {\n  button.classList.replace('start', 'restart');\n  button.innerText = 'Restart';\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  startGame();\n});\n\ndocument.addEventListener('keyup', (e) => {\n  e.preventDefault();\n\n  const previousField = JSON.stringify(field);\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      slideLeft();\n\n      if (JSON.stringify(field) !== previousField) {\n        placeTile();\n      }\n      break;\n    case 'ArrowRight':\n      slideRight();\n\n      if (JSON.stringify(field) !== previousField) {\n        placeTile();\n      }\n      break;\n    case 'ArrowUp':\n      slideUp();\n\n      if (JSON.stringify(field) !== previousField) {\n        placeTile();\n      }\n      break;\n    case 'ArrowDown':\n      slideDown();\n\n      if (JSON.stringify(field) !== previousField) {\n        placeTile();\n      }\n      break;\n\n    default:\n      break;\n  }\n  setCells();\n});\n"],"names":["field","gameField","document","querySelector","gameScore","button","messageLose","messageWin","messageStart","scoreCount","placeTile","randomRow","randomColumn","hasEmptyCells","Math","floor","random","setCells","some","row","includes","removeEmptyCells","filter","num","i","j","currentCell","rows","cells","innerText","classList","value","add","concat","remove","replace","gameIsLost","i1","cellsInRow","j1","slide","emptyCell","merge","length","newRow","push","addEventListener","Array","from","fill","e","preventDefault","previousField","JSON","stringify","code","slideLeft","slideRight","reverse","slideUp","col","slideDown"],"version":3,"file":"index.46d9933b.js.map"}